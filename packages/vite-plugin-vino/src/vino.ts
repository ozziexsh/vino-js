import fs from 'node:fs/promises';
import path from 'node:path';
import { createFilter } from 'vite';
import { trimSlashes } from './util';
import { promisify } from 'node:util';
import { exec } from 'node:child_process';

const execAsync = promisify(exec);

const PHP_REGEX = /<php>([\s\S]*?)<\/php>/g;

const template = `
<?php

// This file is automatically generated by Vino. Do not edit.

return [
  'pages' => [
{{ routes }}
  ],
];
`;

interface Config {
  output_path: string;
  pages_path: string;
  include: string;
  exclude: string;
}

export class Vino {
  static instance: Vino | null = null;
  public routes: string[] = [];

  constructor(public config: Config) {}

  static async make() {
    if (Vino.instance) {
      return Vino.instance;
    }
    const { stdout } = await execAsync('php artisan vino:config');
    const config = JSON.parse(stdout);
    const vino = new Vino(config);
    await vino.init();
    Vino.instance = vino;
    return vino;
  }

  async init() {
    await fs.mkdir(this.absoluteOutputPath(['compiled']), { recursive: true });
  }

  relativePagesDirectory() {
    return this.config.pages_path || 'resources/js/pages';
  }

  absolutePagesDirectory() {
    return path.resolve(this.relativePagesDirectory());
  }

  absoluteOutputPath(parts: string[] = []) {
    return path.resolve(this.config.output_path, ...parts);
  }

  async compileFile(id: string, content: string) {
    const filter = createFilter(
      this.config.include || '**/*.vue',
      this.config.exclude,
    );

    if (!filter(id) || !id.startsWith(this.absolutePagesDirectory())) {
      return content;
    }

    const name = trimSlashes(
      id
        .replace(this.relativePagesDirectory(), '')
        .replace('.vue', '') // todo - handle other extensions
        .replace(process.cwd(), ''),
    );

    const destination = this.absoluteOutputPath(['compiled', `${name}.php`]);
    await fs.mkdir(path.dirname(destination), { recursive: true });

    const matches = content.matchAll(PHP_REGEX);
    let phpContent = '<?php\n';

    if (!this.routes.includes(name)) {
      this.routes.push(name);
    }

    for (const match of matches) {
      phpContent += match[1] + '\n';
    }

    await fs.writeFile(destination, phpContent);

    return content.replace(PHP_REGEX, '');
  }

  async generateVinoFiles() {
    const routes = this.routes
      .map(route => {
        return `    '${route}',`;
      })
      .join('\n');

    const content = template.replace('{{ routes }}', routes);
    await fs.writeFile(this.absoluteOutputPath(['vino.php']), content);
    await execAsync('php artisan vino:generate');
  }
}
